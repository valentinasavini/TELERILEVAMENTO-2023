# R code classification

# TEORIA:
# pixel di vegetazione, all'interno del grafico bidimensionale
# alti valori di infrarosso e bassi valori di infrarosso
# perchè vegetazione : 
# pixel di acqua che assorbe tutto l'infrarosso
# alti valori di infrarosso e bassi valori di rosso
# pixel ?
# vado a misurare la distanza tra classe acqua e vegetazione

install.packages("Rstoolbox")
library(raster)
library(Rstoolbox) #libreria per le analisi da gestione di dati satellitali

# Settare working directory
setwd("C:/lab/")

# Importare dati 
# brick(): file stratificati
# raster(): immagini con un solo layer
so <- brick("Solar_Orbiter_s_first_views_of_the_Sun_pillars.jpg")

# Plot
plotRGB(so, 1, 2, 3, stretch="lin")
plotRGB(so, 1, 2, 3, stretch="hist")

# CLASSIFICARE I DATI DEL SOLE

# https://rspatial.org/raster/rs/4-unsupclassification.html
# organizzati dati in 3 classi (= livelli di energia)

# 1. Trasformare l'immagine in serie di valori continui con funzione
# getValues

singlenr <- getValues(so)
singlenr
# prende ogni singolo pixel di immagine e o rimette in forma tabellare
#set.seed(99)

# 2. Classificazione con funzione:
# kmeans

kcluster <- kmeans(singlenr, centers = 3) #k=3
kcluster
# clustering : raggruppare pixel basandosi su delle classi
# means: medie
# k: tot

# per ogni nuvola uso la media delle x e y (=centroide)
# misuro solo la distanza dal centroide al punto in incognito
# > distanza dal centroide < possibilità che faccia parte di quel gruppo
# quindi means= centroide e k= classi

# 3. Riassegnare le classi a un nuovo raster con funzione:
# setValues
soclass <- setValues(so[[1]], kcluster$cluster) # assign new values to a raster object
# assegnare nuovi valori al raster

cl <- colorRampPalette(c('yellow','black','red'))(100)
plot(soclass, col=cl)

# calcolo la percentuale di pixel delle diverse energi
frequencies <- freq(soclass)
frequencies
# calcolo percentuale
soclass # n pixel= 2221440
tot = 2221440
percentages =  frequencies * 100 / tot
percentages

# classe 1 livello energetico più alto (giallo) : 21.2%
# classe 2 livello energetico medio (nero) : 41.4%
# classe 3 livello energetico più basso (rosso): 37.3%

# classificazione non supervisionata perchè non dicidiamo noi il livello energetico
# più alto o più basso

# GRAN CANYON
gc <- brick("dolansprings_oli_2013088_canyon_lrg.jpg")
gc 

# rosso = 1
# verde = 2
# blu = 3

plotRGB(gc, r=1, g=2, b=3, stretch="lin")
# change the stretch to histogram stretching
plotRGB(gc, r=1, g=2, b=3, stretch="hist")

# classification

# 1. Get values
singlenr <- getValues(gc)
singlenr

# 2. Classify
kcluster <- kmeans(singlenr, centers = 3)
kcluster

# 3. Set values
gcclass <- setValues(gc[[1]], kcluster$cluster) # assign new values to a raster object

cl <- colorRampPalette(c('yellow','black','red'))(100)
plot(gcclass, col=cl)

frequencies <- freq(gcclass)
tot = 58076148
percentages = frequencies * 100 /  tot

# Exercise: classify the map with 4 classes
# 1. Get values
singlenr <- getValues(gc)
singlenr

# 2. Classify
kcluster <- kmeans(singlenr, centers = 4)
kcluster

# 3. Set values
gcclass <- setValues(gc[[1]], kcluster$cluster) # assign new values to a raster object

cl <- colorRampPalette(c('yellow','black','red'))(100)
plot(gcclass, col=cl)

