# CODICE ESAME

# ANALISI SULLO SCIOGLIMENTO DEL GHIACCIAIO MARMOLADA
# vengono prese in considerazioni due immagini risalenti rispettivamente
# al 27.08.2017 e 11.08.2023
# SVOLGIMENTO: 
# 1. IMPORTAZIONE E VISUALIZZAZIONE IMMAGINI 
# 2. CALCOLO E PLOT INDICI SPETTRALI
# 3. PCA
# 4. LAND COVER


# Installo i pacchetti di interesse
install.packages("raster")
install.packages("ggplot2")
install.packages("viridis")
install.packages("rasterVis")


# Carico i pacchetti scaricati
library(raster)
library(ggplot2)
library(viridis)
library(rasterVis)


# Setto la working directory
setwd("C:/lab/esame/")


################ 1. IMPORTAZIONE E VISUALIZZAZIONE IMMAGINI Sentinel2 ################

# 2017
# Elenco tutti i file nella directory corrente che contengono "2017-08-27" nei loro nomi
rlist<- list.files(pattern = "2017-08-27") 

# Importo ciascun file in rlist come un oggetto raster e memorizzo questi oggetti in una lista
import <- lapply(rlist, raster) 

# Combino tutti gli oggetti raster in un singolo oggetto RasterStack - funzione lapply()
marm2017 <- stack(import) 

# Visualizzo l'oggetto RasterStack risultante
marm2017 
# class      : RasterStack 
# dimensions : 612, 875, 535500, 5  (nrow, ncol, ncell, nlayers)
# resolution : 20.00466, 20.01476  (x, y)
# extent     : 1312194, 1329699, 5846191, 5858440  (xmin, xmax, ymin, ymax)
# crs        : +proj=merc +a=6378137 +b=6378137 +lat_ts=0 +lon_0=0 +x_0=0 +y_0=0 +k=1 +units=m +nadgrids=@null +wktext +no_defs 
# names      : X2017.08.27.00_00_2017.08.27.23_59_Sentinel.2_L2A_B02_.Raw., 
# X2017.08.27.00_00_2017.08.27.23_59_Sentinel.2_L2A_B03_.Raw., 
# X2017.08.27.00_00_2017.08.27.23_59_Sentinel.2_L2A_B04_.Raw., 
# X2017.08.27.00_00_2017.08.27.23_59_Sentinel.2_L2A_B11_.Raw., 
#X2017.08.27.00_00_2017.08.27.23_59_Sentinel.2_L2A_B8A_.Raw.

# 2023
# Elenco tutti i file nella directory corrente che contengono "2023-08-11" nei loro nomi
rlist<- list.files(pattern = "2023-08-11") 

# Importo ciascun file in rlist come un oggetto raster e memorizzo questi oggetti in una lista
import <- lapply(rlist, raster) 

# Combino tutti gli oggetti raster in un singolo oggetto RasterStack - funzione lapply()
marm2023 <- stack(import) 

# Visualizzo l'oggetto RasterStack risultante
marm2023
# class      : RasterStack 
# dimensions : 612, 875, 535500, 5  (nrow, ncol, ncell, nlayers)
# resolution : 1312194, 1329699, 5846191, 5858440  (xmin, xmax, ymin, ymax)
# crs        : +proj=merc +a=6378137 +b=6378137 +lat_ts=0 +lon_0=0 +x_0=0 +y_0=0 +k=1 +units=m +nadgrids=@null +wktext +no_defs 
#names      : X2023.08.11.00_00_2023.08.11.23_59_Sentinel.2_L2A_B02_.Raw., 
# X2023.08.11.00_00_2023.08.11.23_59_Sentinel.2_L2A_B03_.Raw., 
# X2023.08.11.00_00_2023.08.11.23_59_Sentinel.2_L2A_B04_.Raw., 
# X2023.08.11.00_00_2023.08.11.23_59_Sentinel.2_L2A_B11_.Raw., 
# X2023.08.11.00_00_2023.08.11.23_59_Sentinel.2_L2A_B8A_.Raw


# Ritaglio sull'area di interesse
ext <- c(1318500, 1323000, 5850000, 5852000) #creo vettore contente le coordinate di interesse

# 2017
marm17 <- crop(marm2017, ext) # taglio l'area d'interesse
marm17
# class      : RasterBrick 
# dimensions : 250, 475, 118750, 5  (nrow, ncol, ncell, nlayers)
# resolution : 20.00466, 20.01476  (x, y)
# extent     : 1315495, 1324997, 5848993, 5853996  (xmin, xmax, ymin, ymax)
# crs        : +proj=merc +a=6378137 +b=6378137 +lat_ts=0 +lon_0=0 +x_0=0 +y_0=0 +k=1 +units=m +nadgrids=@null +wktext +no_defs 
# source     : memory
# names      : X2017.08.27.00_00_2017.08.27.23_59_Sentinel.2_L2A_B02_.Raw., X2017.08.27.00_00_2017.08.27.23_59_Sentinel.2_L2A_B03_.Raw., X2017.08.27.00_00_2017.08.27.23_59_Sentinel.2_L2A_B04_.Raw., X2017.08.27.00_00_2017.08.27.23_59_Sentinel.2_L2A_B11_.Raw., X2017.08.27.00_00_2017.08.27.23_59_Sentinel.2_L2A_B8A_.Raw. 
# min values :                                                      0.0000,                                                      0.0000,                                                      0.0000,                                                      0.0058,                                                      0.0000 
# max values :                                                      1.1976,                                                      1.2184,                                                      1.2528,                                                      1.5527,                                                      1.3427 

# 2023
marm23 <- crop(marm2023, ext) # taglio l'area d'interesse
marm23
# class      : RasterBrick 
# dimensions : 250, 475, 118750, 5  (nrow, ncol, ncell, nlayers)
# resolution : 20.00466, 20.01476  (x, y)
# extent     : 1315495, 1324997, 5848993, 5853996  (xmin, xmax, ymin, ymax)
# crs        : +proj=merc +a=6378137 +b=6378137 +lat_ts=0 +lon_0=0 +x_0=0 +y_0=0 +k=1 +units=m +nadgrids=@null +wktext +no_defs 
# source     : memory
# names      : X2023.08.11.00_00_2023.08.11.23_59_Sentinel.2_L2A_B02_.Raw., X2023.08.11.00_00_2023.08.11.23_59_Sentinel.2_L2A_B03_.Raw., X2023.08.11.00_00_2023.08.11.23_59_Sentinel.2_L2A_B04_.Raw., X2023.08.11.00_00_2023.08.11.23_59_Sentinel.2_L2A_B11_.Raw., X2023.08.11.00_00_2023.08.11.23_59_Sentinel.2_L2A_B8A_.Raw. 
# min values :                                                      0.0000,                                                      0.0000,                                                      0.0000,                                                      0.0048,                                                      0.0000 
# max values :                                                      1.4000,                                                      1.5312,                                                      1.5736,                                                      1.6021,                                                      1.3963 


# Visualizzo le bande
plot(marm17)
plot(marm23)
dev.off()

# Modifico i nomi dei layer considerando:
# BANDA 2 =   blu
# BANDA 3 = verde 
# BANDA 4 = rosso
# BANDA 11 = SWIR
# BANDA 8 = NIR 

# 2017
names(marm17) <- c("b_blu", "b_verde", "b_rosso","b_SWIR", "b_NIR" ) 
names(marm17) # controllo

# 2023
names(marm23) <- c("b_rossa", "b_verde", "b_blu", "b_SWIR", "b_NIR") 
names(marm23) # controllo


# Plot immagini con colori naturali (funzione plotRGB())
par(mfrow = c(2, 1))
plotRGB(marm17, 3, 2, 1, stretch= "lin") #2017
plotRGB(marm23, 3, 2, 1, stretch= "lin") #2023
dev.off()

# Esporto immagini a color (funzione png("nome.pdf"))
png("2017.png") # 2017
plotRGB(marm17, 3,2,1, stretch="lin")
dev.off()

png("2023.png") # 2023
plotRGB(marm23, 3,2,1, stretch = "lin") 
dev.off()

# Esporto banda SWIR - neve riflette meglio nella banda SWIR
png("SWIR_2017.png") # 2017
plotRGB(marm17, 4,2,1, stretch = "lin")
dev.off()

png("SWIR_2023.png") #2023
plotRGB(marm23, 4,2,1, stretch = "lin")
dev.off()


################ 2. CALCOLO E PLOT INDICI SPETTRALI ################

################ a. NDSI index ################ 
# Calcolo l'indice NSDI - Normalized Difference Snow Index
# per identificare e mappare la presenza di neve nelle immagini satellitari
# NDSI= Green - SWIR / Green + SWIR
# range: -1 - 1

# 2017
NDSI_17 <- ((marm17[[2]]-marm17[[4]])/(marm17[[2]]+marm17[[4]]))

# 2023
NDSI_23 <- ((marm23[[2]]-marm23[[4]])/(marm23[[2]]+marm23[[4]]))

# Analisi temporale 2017-2023
NDSI_diff <- NDSI_17 - NDSI_23

# Normalizzo
NDSI_17_min <- minValue(NDSI_17)
NDSI_17_max <- maxValue(NDSI_17)
NDSI_23_min <- minValue(NDSI_23)
NDSI_23_max <- maxValue(NDSI_23)
NDSI_diff_min <- minValue(NDSI_diff)
NDSI_diff_max <- maxValue(NDSI_diff)

NDSI17_n <- (NDSI_17 - NDSI_17_min) / (NDSI_17_max - NDSI_17_min) * 2 - 1
NDSI23_n <- (NDSI_23 - NDSI_23_min) / (NDSI_23_max - NDSI_23_min) * 2 - 1
NDSI_diff_n <- (NDSI_diff - NDSI_diff_min) / (NDSI_diff_max - NDSI_diff_min) * 2 - 1


# Creo palette colori
cl <- colorRampPalette(c("black","red","blue","white"))(100)

# Plot
par(mfrow = c(1,3))
plot(NDSI17_n, col= cl) +
  title(main = "NDSI 2017")
plot(NDSI17_n, col= cl) +
  title(main = "NDSI 2023")
plot(NDSI_diff_n, col=cl)+
  title(main = "NDSI diff")# (*)

dev.off()

# (*)
# valori alti: aree con perdita in neve dal 2017 al 2023
# valori medi: aree con differenza di NDSI fra 2017 e 2023 nulla
# valori bassi: aree con guadagno in neve dal 2017 al 2023

# Salvo le immagini
png("NDSI_2017.png")
plot(NDSI17_n, col=cl) +
  title(main = "NDSI 2017")
dev.off()

png("NDSI_2023.png")
plot(NDSI23_n, col=cl) +
  title(main = "NDSI 2023")
dev.off()

png("NDSI_diff.png")
plot(NDSI_diff_n, col=cl) +
  title(main = "differenze NDSI")
dev.off()


# Verifico tramite t_test
t_resultNDSI <-t.test(NDSI17_n[], NDSI23_n[], paired = TRUE)
t_resultNDSI

# Paired t-test

# data:  NDSI17_n[] and NDSI23_n[]
# t = 44.007, df = 118749, p-value < 2.2e-16
# alternative hypothesis: true mean difference is not equal to 0
# 95 percent confidence interval:
#  0.01566776 0.01712843
# sample estimates:
#   mean difference 
#0.0163981

################ b. SWI index ################  
# Calcolo l'indice SWI - Snow Water Index 
# il quale fornisce un chiaro contrasto tra la neve e altri tipi di caratteristiche, 
# inclusi i corpi d'acqua
# SWI = Green * (NIR-SWIR) / (Green + NIR) * (NIR + SWIR) 

# 2017
SWI_17 <- (marm17[[2]]*(marm17[[5]]-marm17[[4]]))/((marm17[[2]]+marm17[[5]])*(marm17[[5]]+marm17[[4]]))


# 2023
SWI_23 <- (marm23[[2]]*(marm23[[5]]-marm23[[4]]))/((marm23[[2]]+marm23[[5]])*(marm23[[5]]+marm23[[4]]))

# Analisi temporale
SWI_diff <- SWI_17-SWI_23

# Normalizzo
SWI_17_min <- minValue(SWI_17)
SWI_17_max <- maxValue(SWI_17)
SWI_23_min <- minValue(SWI_23)
SWI_23_max <- maxValue(SWI_23)
SWI_diff_min <- minValue(SWI_diff)
SWI_diff_max <- maxValue(SWI_diff)

SWI17_n <- (SWI_17 - SWI_17_min) / (SWI_17_max - SWI_17_min) * 2 - 1
SWI23_n <- (SWI_23 - SWI_23_min) / (SWI_23_max - SWI_23_min) * 2 - 1
SWI_diff_n <- (SWI_diff - SWI_diff_min) / (SWI_diff_max - SWI_diff_min) * 2 - 1

# Plot
par(mfrow = c(1, 3))
plot(SWI17_n,
     col = cl,
     main = "SWI 2017")
plot(SWI23_n,
     col = cl,
     main = "SWI 2023")
plot(SWI_diff_n,
     col = cl,
     main = "SWI diff") #(*)
dev.off()

#(*)
# valori alti: aree con perdita in neve dal 2017 al 2023
# valori medi: aree con differenza di SWI fra 2017 e 2023 nulla
# valori bassi: aree con guadagno in neve dal 2017 al 2023

# Salvo le immagini
png("SWI_2017.png")
plot(SWI17_n, col=cl) +
  title(main = "SWI 2017")
dev.off()

png("SWI_2023.png")
plot(SWI23_n, col=cl) +
  title(main = "SWI 2023")
dev.off()

png("SWI_diff.png")
plot(SWI_diff_n, col=cl) +
  title(main = "differenze SWI")
dev.off()

t_resultSWI <-t.test(SWI17_n[], SWI23_n[], paired = TRUE)
t_resultSWI
# data:  SWI17_n[] and SWI23_n[]
# t = 226.79, df = 118749, p-value < 2.2e-16
# alternative hypothesis: true mean difference is not equal to 0
# 95 percent confidence interval:
#  0.04407303 0.04484144
# sample estimates:
#  mean difference 
# 0.04445723 



################ 3. PCA ################
# PCA (Principal Component Analysis)

# Imposto il seme per la riproducibilità
set.seed(1)

# Carico le differenze degli indici NDSI e SWI in un oggetto raster "box"
box <- stack(NDSI_diff_n, SWI_diff_n)

# Traccio un grafico delle differenze degli indici
plot(box, main = "Differenze degli indici",
     xaxt = "n", yaxt = "n")

# Chiudio il dispositivo grafico per evitare conflitti
dev.off()

# Campionamento casuale di 10.000 punti dal raster "box"
sr <- sampleRandom(box, 10000)

# Eseguo l'Analisi delle Componenti Principali (PCA) sui campioni
pca <- prcomp(sr)

# Mostro un riepilogo della varianza spiegata dalla PCA
summary(pca)

# Traccio un grafico delle componenti principali per mostrare la correlazione con le bande originali
plot(pca)

# Predico le prime due componenti principali per l'intero raster "box"
pci <- predict(box, pca, index = 1:2)

# Traccio un grafico della prima componente principale con una scala di colori specifica
plot(pci[[1]], col = cl)

# Converto la prima componente principale in un data frame con coordinate
pc_final <- as.data.frame(pci[[1]], xy = TRUE)

# Visualizzo la mappa della prima componente principale utilizzando ggplot con la scala di colori "inferno" di viridis
ggplot() + 
  geom_raster(pc_final, mapping = aes(x = x, y = y, fill = PC1)) + 
  scale_fill_viridis(option = "inferno")

# Chiudo il dispositivo grafico
dev.off()

# Esporto 
png("PCA.png")
ggplot() + 
  geom_raster(pc_final, mapping = aes(x = x, y = y, fill = PC1)) + 
  scale_fill_viridis(option = "inferno")
dev.off()

# La visualizzazione con ggplot aiuta a comprendere come la variazione catturata
# dal primo componente principale è distribuita nell'area di studio, basandosi 
# sulle differenze negli indici di input.
# La mia PCA sembra indicare che dove i valori sono molto bassi, 
# la situazione in termini di copertura nevosa è cambiata significativamente. 
# Man mano che i valori aumentano, si prevede che la situazione cambi meno

# bassi valori PC1 -> alta variabilità
# alti valori PC1 -> bassa variabilità



################ 4. CLASSIFICAZIONE NDSI ################

################ 4. CLASSIFICAZIONE ################

#### indice NDSI ####
# Estraggo i valori continui dal raster NDSI del 2017
singlenr1 <- getValues(NDSI17_n)

# Visualizzo i valori estratti
singlenr1

# Imposto il seed per la riproducibilità dei risultati
set.seed(99)

# Eseguo la classificazione k-means con 2 centri (cluster)
kcluster1 <- kmeans(singlenr1, centers = 2)

# Visualizzo i risultati della classificazione k-means
kcluster1

# Riassegno i valori del raster ai cluster ottenuti
NDSI_17_class <- setValues(NDSI17_n, kcluster1$cluster)



# Ripeto per NDSI23_n
singlenr2 <- getValues(NDSI23_n)
singlenr2
set.seed(99)
kcluster2 <- kmeans(singlenr2, centers = 2)
kcluster2
NDSI_23_class <- setValues(NDSI23_n, kcluster2$cluster)


# Ripeto per NDSI_diff_n
singlenrd <- getValues(NDSI_diff_n)
singlenrd
set.seed(99)
kclusterd <- kmeans(singlenrd, centers = 2)
kclusterd
NDSI_diff_class <- setValues(NDSI_diff_n, kclusterd$cluster)


### CALCOLO LE FREQUENZE
# NDSI17_n
# Calcolo le frequenze dei valori classificati nel raster
frequencies17 <- freq(NDSI_17_class)

# Calcolo il numero totale di celle nel raster classificato
tot1 = ncell(NDSI_17_class)

# Calcolo le percentuali delle frequenze rispetto al totale delle celle
percentages1 = frequencies17 * 100 / tot1

# Visualizzo le percentuali calcolate
percentages1
# Altro = 73.82667
# Neve = 26.17333

# Ripeto per NDSI23_n
frequencies23 <- freq(NDSI_23_class)
tot2 = ncell(NDSI_23_class)
percentages2 = frequencies23 * 100 / tot2
percentages2
# Altro =  80.03556
# Neve= 19.96444

# Ripeto per NDSI_diff_n
frequenciesNDSId <- freq(NDSI_diff_class)
totd = ncell(NDSI_diff_class)
percentagesd = frequenciesNDSId * 100 / tot1
percentagesd
# Altro= 86.54667
# Neve= 13.45333




#### Indice SWI ####
# SWI17_n
singlenr1 <- getValues(SWI17_n)
singlenr1
set.seed(99)
kcluster1 <- kmeans(singlenr1, centers = 2)
kcluster1
SWI_17_class <- setValues(SWI17_n, kcluster1$cluster)

# SWI23_n
singlenr2 <- getValues(SWI23_n)
singlenr2
set.seed(99)
kcluster2 <- kmeans(singlenr2, centers = 2)
kcluster2
SWI_23_class <- setValues(SWI23_n, kcluster2$cluster)

# SWI_diff_n
singlenrd <- getValues(SWI_diff_n)
singlenrd
set.seed(99)
kclusterd <- kmeans(singlenrd, centers = 2)
kclusterd
SWI_diff_class <- setValues(SWI_diff_n, kclusterd$cluster)

### CALCOLO LE FREQUENZE
# SWI17_n
frequencies17 <- freq(SWI_17_class)
tot1 = ncell(SWI_17_class)
percentages1 = frequencies17 * 100 / tot1
percentages1
# Altro = 75.69333
# Neve = 24.30667

# SWI23_n
frequencies23 <- freq(SWI_23_class)
tot2 = ncell(SWI_23_class)
percentages2 = frequencies23 * 100 / tot2
percentages2
# Altro =  81.67111
# Neve= 18.32889

# SWI_diff_n
frequenciesSWId <- freq(SWI_diff_class)
totd = ncell(NDSI_diff_class)
percentagesd = frequenciesSWId * 100 / tot1
percentagesd
# Altro= 88.53778
# Neve= 11.46222


#### EFFETTUO UNA MEDIA TRA I VALORI NDSI E SWI ###
mean_snow17 <- (26.17333+24.30667)/2
mean_snow23 <- (19.96444+18.32889)/2
mean_snowdiff <- (13.45333+11.46222)/2


# GRAFICO PERCENTUALE
# Dati delle percentuali di neve
data <- data.frame(
  Anno = c("2017", "2023", "differenza"),
  Percentuale_Neve = c(mean_snow17, mean_snow23, mean_snowdiff))

# Creo il grafico con ggplot
ggplot(data, aes(x = Anno, y = Percentuale_Neve, fill = Anno)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Percentuale di neve tra il 2017 e il 2023 - media tra NDSI e SWI",
       x = "Anno",
       y = "Percentuale di neve",
       fill = "Anno") +
  scale_fill_brewer(palette = "Set3") +
  theme_minimal()




# VISUALIZZO ED ESPORTO GRAFICI
# NDSI 2017
png("NDSI_17_class.png")
cl1 <- colorRampPalette(c("white", "black"))(2)
plot(NDSI_17_class, col= cl1, legend = FALSE, 
     main = "SNOW in 2017", sub = "NDSI 2017", 
     xaxt= "n", yaxt="n")
legend("bottom", legend = c("Non-Snow", "Snow"), fill = c("black", "white"))
dev.off()

# NDSI 2023
png("NDSI_23_class.png")
cl1 <- colorRampPalette(c("white", "black"))(2)
plot(NDSI_23_class, col= cl1, legend = FALSE, 
     main = "SNOW in 2023", sub = "NDSI 2023", 
     xaxt= "n", yaxt="n")
legend("bottom", legend = c("Non-Snow", "Snow"), fill = c("black", "white"))
dev.off()

# differenza NDSI
png("NDSI_diff_class.png")
cl1 <- colorRampPalette(c("white", "black"))(2)
plot(NDSI_diff_class, col= cl1, legend = FALSE, 
     main = "SNOW Difference", sub = "NDSI Difference", 
     xaxt= "n", yaxt="n")
legend("bottom", legend = c("Perdita", "Non Perdita"), fill = c("black", "white"))
dev.off()

# SWI 2017
png("SWI_17_class.png")
cl1 <- colorRampPalette(c("white", "black"))(2)
plot(NDSI_17_class, col= cl1, legend = FALSE, main = "SNOW in 2017", sub = "NDSI 2017", xaxt= "n", yaxt="n")
legend("bottom", legend = c("Non-Snow", "Snow"), fill = c("black", "white"))
dev.off()

# SWI 2023
png("SWI_23_class.png")
cl1 <- colorRampPalette(c("white", "black"))(2)
plot(NDSI_23_class, col= cl1, legend = FALSE, main = "SNOW in 2023", sub = "NDSI 2023", xaxt= "n", yaxt="n")
legend("bottom", legend = c("Non-Snow", "Snow"), fill = c("black", "white"))
dev.off()

# differenza SWI
png("SWI_diff_class.png")
cl1 <- colorRampPalette(c("white", "black"))(2)
plot(NDSI_diff_class, col= cl1, legend = FALSE, main = "SNOW Difference", sub = "NDSI Difference", xaxt= "n", yaxt="n")
legend("bottom", legend = c("Perdita", "Non Perdita"), fill = c("black", "white"))
dev.off()

# Grafico percentuali
png("grafico.png")
ggplot(data, aes(x = Anno, y = Percentuale_Neve, fill = Anno)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Percentuale di neve tra il 2017 e il 2023 - media tra NDSI e SWI",
       x = "Anno",
       y = "Percentuale di neve",
       fill = "Anno") +
  scale_fill_brewer(palette = "Set3") +
  theme_minimal()
dev.off()
